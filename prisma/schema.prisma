generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Industry {
  id         String    @id @default(uuid()) @db.Uuid
  name       String    @unique @db.VarChar(255)
  created_at DateTime  @default(now())
  updated_at DateTime? @db.Timestamp(0)
}

model Role {
  id           String    @id @default(uuid()) @db.Uuid
  name         String    @unique @db.VarChar(255)
  access_level String    @db.VarChar(255)
  created_at   DateTime? @db.Timestamp(0)
  updated_at   DateTime? @db.Timestamp(0)
  deleted_at   DateTime? @db.Timestamp(0)
  appUsers     AppUser[]
  users        User[]
}

model User {
  id                        String           @id @default(uuid()) @db.Uuid
  name                      String           @db.VarChar(255)
  email                     String           @unique @db.VarChar(255)
  password                  String?          @db.VarChar(255)
  mgp_commission            Float?
  email_verified_at         DateTime?        @db.Timestamp(0)
  remember_token            String?          @db.VarChar(100)
  google_id                 String?          @db.VarChar(255)
  created_at                DateTime?        @db.Timestamp(0)
  updated_at                DateTime?        @db.Timestamp(0)
  deleted_at                DateTime?        @db.Timestamp(0)
  firebase_uid              String?          @db.VarChar(255)
  role_id                   String           @db.Uuid
  first_name                String?          @db.VarChar(100)
  last_name                 String?          @db.VarChar(100)
  phone_number              String?          @db.VarChar(50)
  android_applink           String?          @db.VarChar(255)
  app_banner                String?          @db.VarChar(255)
  app_icon                  String?          @db.VarChar(255)
  app_name                  String?          @db.VarChar(255)
  business_name             String?          @db.VarChar(255)
  checklist                 String?          @db.VarChar(255)
  domain                    String?          @db.VarChar(255)
  firebase_app_id           String?          @db.VarChar(255)
  goal                      String?          @db.VarChar(255)
  industry_id               String?          @db.VarChar(30)
  industry_other            String?          @db.VarChar(255)
  ios_applink               String?          @db.VarChar(255)
  logo                      String?          @db.VarChar(255)
  mobile_template           String?          @db.VarChar(255)
  redirect_url              String?          @db.VarChar(255)
  social_media              String?          @db.VarChar(255)
  social_media_handler_name String?          @db.VarChar(255)
  subscription_id           String?          @db.VarChar(30)
  terms_of_service          String?          @db.VarChar(255)
  trainer_created_by        String?          @db.VarChar(30)
  trainer_id                String?          @db.VarChar(255)
  unique_id                 String?          @db.VarChar(50)
  web_applink               String?          @db.VarChar(255)
  website                   String?          @db.VarChar(255)
  old_user_id               Int?
  is_show_logo              Boolean?
  avatar                    String?
  facebook_id               String?          @db.VarChar(255)
  payment_period            String?          @db.VarChar(255)
  payment_plan              String?          @db.VarChar(255)
  signup_status             String?          @db.VarChar(255)
  subscription_status       String?          @db.VarChar(22)
  check_schedule            Boolean?
  AppleAccount              AppleAccount?
  AppleAppDetail            AppleAppDetail?
  FreeSignup                FreeSignup[]
  GoogleAccount             GoogleAccount?
  GoogleAppDetail           GoogleAppDetail?
  token                     PasswordToken[]
  StripeConnect             StripeConnect?
  SuperAdminFees            SuperAdminFees[]
  role                      Role             @relation(fields: [role_id], references: [id])
  commissions               commissions?
  form_settings             form_settings[]
  form_styles               form_styles[]
  products                  products[]
  split_payments            split_payments[]
  subscriptions             subscriptions[]
  free_trial_end_date       DateTime?        @db.Timestamptz(6)
}

model AppUser {
  id                String    @id @default(uuid()) @db.Uuid
  first_name        String    @db.VarChar(255)
  last_name         String    @db.VarChar(255)
  email             String    @db.VarChar(255)
  password          String?   @db.VarChar(255)
  mgp_commission    Float?
  email_verified_at DateTime? @db.Timestamp(0)
  remember_token    String?   @db.VarChar(100)
  google_id         String?   @db.VarChar(255)
  firebase_uid      String?   @db.VarChar(255)
  role_id           String    @db.Uuid
  appID             String?   @db.VarChar(255)
  customerId        String    @db.VarChar(255)
  userId            String    @db.VarChar(255)
  created_at        DateTime? @default(now()) @db.Timestamptz(6)
  updated_at        DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  deleted_at        DateTime? @db.Timestamptz(6)
  role              Role      @relation(fields: [role_id], references: [id])
}

model FreeSignup {
  id          String    @id @default(uuid()) @db.Uuid
  title       String    @db.VarChar(255)
  description String    @db.VarChar(255)
  userId      String    @db.Uuid
  created_at  DateTime  @default(now()) @db.Timestamptz(6)
  updated_at  DateTime  @default(now()) @updatedAt @db.Timestamptz(6)
  deleted_at  DateTime? @db.Timestamptz(6)
  identifier  String?   @db.VarChar(10)
  user        User      @relation(fields: [userId], references: [id])
}

model PasswordToken {
  id         String    @id @default(uuid()) @db.Uuid
  isConsumed Boolean
  userId     String    @db.Uuid
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  updated_at DateTime  @default(now()) @updatedAt @db.Timestamptz(6)
  deleted_at DateTime? @db.Timestamptz(6)
  user       User      @relation(fields: [userId], references: [id])
}

model StripeConnect {
  id               String    @id @default(uuid()) @db.Uuid
  userId           String    @unique @db.Uuid
  stripeAccountId  String
  stripeConnectUrl String
  connectStatus    Boolean
  created_at       DateTime  @default(now()) @db.Timestamptz(6)
  updated_at       DateTime  @default(now()) @updatedAt @db.Timestamptz(6)
  deleted_at       DateTime? @db.Timestamptz(6)
  user             User      @relation(fields: [userId], references: [id])
}

model App {
  id                    String          @id @default(uuid()) @db.Uuid
  bussinessName         String?
  industryId            String?
  industryOther         String?
  website               String?
  mgpCommission         Float?
  logo                  String?
  showLogo              Boolean?
  appName               String?
  appIcon               String?
  appBanner             String?
  socialMedia           String?
  socialMediaHandler    String?
  checklist             String?
  iosAppLink            String?
  andriodAppLink        String?
  webAppLink            String?
  created_at            DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at            DateTime?       @default(now()) @updatedAt @db.Timestamptz(6)
  deleted_at            DateTime?       @db.Timestamptz(6)
  userId                String?         @db.Uuid
  androidStatus         Int             @default(0)
  iosStatus             Int             @default(0)
  appCategory           String?
  appDesign             String?
  appTemplate           String?
  firebase_app_id       String?
  push_notification_key String?
  launch_status         String?
  form_settings         form_settings[]
  form_styles           form_styles[]
}

model NetVolumeSales {
  id     Int      @id @default(autoincrement())
  date   DateTime @unique
  charge Float
  fee    Float
}

model AppleAccount {
  id             String    @id @default(uuid()) @db.Uuid
  teamId         String
  teamName       String
  bundleId       String
  iosKeyId       String
  iosSecret      String
  iapKeyId       String
  iapKey         String
  apiKeyId       String
  apiKeyIssuerId String
  apiKey         String
  userId         String    @unique @db.Uuid
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  updated_at     DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  deleted_at     DateTime? @db.Timestamptz(6)
  user           User      @relation(fields: [userId], references: [id])
}

model AppleAppDetail {
  id               String    @id @default(uuid()) @db.Uuid
  supportUrl       String
  marketingUrl     String?
  privacyPolicyUrl String
  userId           String    @unique @db.Uuid
  created_at       DateTime? @default(now()) @db.Timestamptz(6)
  updated_at       DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  deleted_at       DateTime? @db.Timestamptz(6)
  category         String
  description      String
  iconFile         String
  iconUrl          String
  keywords         String
  name             String
  promotion        String
  screenshotFiles  String[]
  screenshotUrls   String[]
  subtitle         String
  user             User      @relation(fields: [userId], references: [id])
  status           String    @default("verify")
}

model GoogleAccount {
  id         String    @id @default(uuid()) @db.Uuid
  gplk       String
  jsonKey    String
  userId     String    @unique @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  deleted_at DateTime? @db.Timestamptz(6)
  user       User      @relation(fields: [userId], references: [id])
}

model GoogleAppDetail {
  id               String    @id @default(uuid()) @db.Uuid
  name             String
  iconFile         String
  iconUrl          String
  description      String
  shortDesc        String
  featureImageFile String
  featureImageUrl  String
  category         String
  keywords         String
  supportUrl       String
  marketingUrl     String
  privacyPolicyUrl String
  screenshotFiles  String[]
  screenshotUrls   String[]
  userId           String    @unique @db.Uuid
  created_at       DateTime? @default(now()) @db.Timestamptz(6)
  updated_at       DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  deleted_at       DateTime? @db.Timestamptz(6)
  user             User      @relation(fields: [userId], references: [id])
}

model DashboardGrossVolume {
  id              Int       @id @default(autoincrement())
  stripeAccountId String    @unique @db.VarChar(255)
  value           Float
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  updated_at      DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  deleted_at      DateTime? @db.Timestamptz(6)
}

model coupons {
  id               String    @id @default(uuid()) @db.Uuid
  product_id       String    @db.Uuid
  stripe_coupon_id String    @db.VarChar(255)
  coupon_code      String?   @db.VarChar(22)
  amount_off       Float?
  percent_off      Float?
  currency         String?   @db.VarChar(5)
  duration         String?   @db.VarChar(20)
  livemode         Int?
  max_redemptions  Int?
  metadata         String?
  name             String?   @db.VarChar(22)
  redeem_by        Int?
  times_redeemed   Int?
  valid            String?   @db.VarChar(100)
  created_at       DateTime  @default(now()) @db.Timestamptz(6)
  updated_at       DateTime  @default(now()) @db.Timestamptz(6)
  deleted_at       DateTime? @db.Timestamptz(6)
  products         products  @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_coupons_products")
}

model form_settings {
  id             String       @id @default(uuid()) @db.Uuid
  identifier     String       @default("usd") @db.VarChar(10)
  miscellaneous  Json?
  user_id        String       @db.Uuid
  product_id     String       @db.Uuid
  price_id       String       @db.Uuid
  app_id         String?      @db.Uuid
  created_at     DateTime     @default(now()) @db.Timestamptz(6)
  updated_at     DateTime     @default(now()) @db.Timestamptz(6)
  deleted_at     DateTime?    @db.Timestamptz(6)
  form_styles_id String?      @db.Uuid
  App            App?         @relation(fields: [app_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_form_settings_app")
  form_styles    form_styles? @relation(fields: [form_styles_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_form_settings_form_styles")
  prices         prices       @relation(fields: [price_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_form_settings_prices")
  products       products     @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_form_settings_products")
  User           User         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_form_settings_user")
}

model prices {
  id              String          @id @default(uuid()) @db.Uuid
  product_id      String          @db.Uuid
  stripe_price_id String          @db.VarChar(255)
  type            String          @db.VarChar(22)
  currency        String          @default("usd") @db.VarChar(3)
  trial_day       Int             @default(0)
  amount          Float
  duration        String?         @db.VarChar(22)
  pricing_type    String          @db.VarChar(255)
  created_at      DateTime        @default(now()) @db.Timestamptz(6)
  updated_at      DateTime        @default(now()) @db.Timestamptz(6)
  deleted_at      DateTime?       @db.Timestamptz(6)
  form_settings   form_settings[]
  products        products        @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_prices_products")
}

model products {
  id                String          @id @default(uuid()) @db.Uuid
  user_id           String          @db.Uuid
  stripe_product_id String          @db.VarChar(255)
  name              String          @db.VarChar(255)
  description       String?         @db.Text
  created_at        DateTime        @default(now()) @db.Timestamptz(6)
  updated_at        DateTime        @default(now()) @db.Timestamptz(6)
  deleted_at        DateTime?       @db.Timestamptz(6)
  coupons           coupons[]
  form_settings     form_settings[]
  prices            prices[]
  User              User            @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_products_user")
  subscriptions     subscriptions[]
}

model SuperAdminCharges {
  id              String    @id @default(uuid()) @db.Uuid
  amount          Int?
  amount_origin   Int?
  currency        String?
  status          String?
  transactionId   String?
  created_at_unix BigInt?
  customerId      String?
  email           String?
  date            DateTime
  chargeId        String?   @unique
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  deleted_at      DateTime? @db.Timestamptz(6)
}

model SuperAdminFees {
  id              String    @id @default(uuid()) @db.Uuid
  feeId           String?   @unique
  amount          Int?
  amount_origin   Int?
  currency        String?
  status          String?
  transactionId   String?
  chargeId        String?
  created_at_unix BigInt?
  date            DateTime
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  updated_at      DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  deleted_at      DateTime? @db.Timestamptz(6)
  userId          String?   @db.Uuid
  User            User?     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_fees_user")
}

model AdminCharges {
  id              String    @id @default(uuid()) @db.Uuid
  userId          String?
  amount          Int?
  amount_origin   Int?
  currency        String?
  status          String?
  transactionId   String?
  created_at_unix BigInt?
  chargeId        String?   @unique
  applicationId   String?
  invoice         String?
  customerEmail   String?
  customerId      String?
  date            DateTime
  disputed        Boolean   @default(false)
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  updated_at      DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  deleted_at      DateTime? @db.Timestamptz(6)
  fee             Int?
  fee_origin      Int?
}

model AdminCustomers {
  id              String    @id @default(uuid()) @db.Uuid
  userId          String?
  customerId      String?
  created_at_unix BigInt?
  balance         Int?
  email           String?   @db.VarChar(255)
  name            String?   @db.VarChar(255)
  date            DateTime
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  updated_at      DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  deleted_at      DateTime? @db.Timestamptz(6)
}

model AdminSubscriptions {
  id                 String    @id @default(uuid()) @db.Uuid
  userId             String?
  subscriptionId     String?
  status             String?
  created_at_unix    BigInt?
  amount             Int?
  amount_origin      Int?
  currency           String?
  customerId         String?
  applicationId      String?
  itemId             String?
  planId             String?
  priceId            String?
  productId          String?
  latestInvoiceId    String?
  currentPeriodEnd   Int?
  currentPeriodStart Int?
  billingCycleAnchor Int?
  date               DateTime
  interval           String?
  created_at         DateTime? @default(now()) @db.Timestamptz(6)
  updated_at         DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  deleted_at         DateTime? @db.Timestamptz(6)
  canceled_at_unix   BigInt?
  productName        String?
}

model subscriptions {
  id                     String                @id @default(uuid()) @db.Uuid
  stripe_subscription_id String                @db.VarChar(255)
  product_id             String?               @db.Uuid
  created_at             DateTime              @default(now()) @db.Timestamptz(6)
  updated_at             DateTime              @default(now()) @db.Timestamptz(6)
  deleted_at             DateTime?             @db.Timestamptz(6)
  split_status           split_enum
  logs                   String?
  referred_by            String?               @db.Uuid
  end_first_comm_date    DateTime?             @db.Timestamp(6)
  end_second_comm_date   DateTime?             @db.Timestamp(6)
  merchant_id            String?               @db.Uuid
  commission_payments    commission_payments[]
  commissions            commissions?          @relation(fields: [referred_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_subscriptions_commissions")
  products               products?             @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_subscriptions_products")
  User                   User?                 @relation(fields: [merchant_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_subscriptions_user")
}

model sca_purchase {
  id             String    @id @default(uuid()) @db.Uuid
  payment_intent String    @db.VarChar(255)
  created_at     DateTime  @default(now()) @db.Timestamptz(6)
  updated_at     DateTime  @default(now()) @db.Timestamptz(6)
  deleted_at     DateTime? @db.Timestamptz(6)
}

model form_styles {
  id               String          @id @default(uuid()) @db.Uuid
  style_object     Json?
  analytics_object Json?
  user_id          String          @db.Uuid
  app_id           String          @db.Uuid
  created_at       DateTime        @default(now()) @db.Timestamptz(6)
  updated_at       DateTime        @default(now()) @db.Timestamptz(6)
  deleted_at       DateTime?       @db.Timestamptz(6)
  form_settings    form_settings[]
  App              App             @relation(fields: [app_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_form_style_app")
  User             User            @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_form_style_user")
}

model split_payments {
  id                String       @id @default(uuid()) @db.Uuid
  stripe_account_id String       @db.VarChar(255)
  email             String       @db.VarChar(255)
  split             Float
  merchant_id       String       @db.Uuid
  created_at        DateTime     @default(now()) @db.Timestamptz(6)
  updated_at        DateTime     @default(now()) @db.Timestamptz(6)
  deleted_at        DateTime?    @db.Timestamptz(6)
  commission_id     String?      @db.Uuid
  commissions       commissions? @relation(fields: [commission_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_split_commissions")
  User              User         @relation(fields: [merchant_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_split_payments_user")
}

model commissions {
  id                  String                @id @default(uuid()) @db.Uuid
  identifier          String                @db.VarChar(10)
  salesperson_id      String                @unique @db.Uuid
  first_commission    Json?
  second_commission   Json?
  created_at          DateTime              @default(now()) @db.Timestamptz(6)
  updated_at          DateTime              @default(now()) @db.Timestamptz(6)
  deleted_at          DateTime?             @db.Timestamptz(6)
  commission_payments commission_payments[]
  User                User                  @relation(fields: [salesperson_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_commissions_users")
  split_payments      split_payments[]
  subscriptions       subscriptions[]
}

model Notifications {
  id         String    @id @default(uuid()) @db.Uuid
  title      String
  url        String
  text       String
  category   String
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @db.Timestamptz(6)
  deleted_at DateTime? @db.Timestamptz(6)
}

model NotificationRead {
  id              String    @id @default(uuid()) @db.Uuid
  user_id         String    @db.Uuid
  notification_id String    @db.Uuid
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)
  deleted_at      DateTime? @db.Timestamptz(6)
}

model commission_payments {
  id              String        @id @default(uuid()) @db.Uuid
  commission_id   String        @db.Uuid
  subscription_id String        @db.Uuid
  amount          Float
  payment_status  split_enum    @default(SUCCESS)
  created_at      DateTime      @default(now()) @db.Timestamptz(6)
  updated_at      DateTime      @default(now()) @db.Timestamptz(6)
  deleted_at      DateTime?     @db.Timestamptz(6)
  commissions     commissions   @relation(fields: [commission_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_payments_commissions")
  subscriptions   subscriptions @relation(fields: [subscription_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_payments_subscriptions")
}

model admin_changes {
  id             String      @id @default(uuid()) @db.Uuid
  table          String      @db.VarChar(255)
  column_changed String      @db.VarChar(255)
  record_id      String      @db.Uuid
  logs           String?
  type           change_enum @default(MODIFY)
  created_at     DateTime    @default(now()) @db.Timestamptz(6)
  updated_at     DateTime    @default(now()) @db.Timestamptz(6)
}

model stripesubdata {
  id                     String    @id @default(uuid()) @db.Uuid
  stripe_subscription_id String    @unique @db.VarChar(255)
  subscription_status    String?   @db.VarChar(22)
  created_at             DateTime  @default(now()) @db.Timestamptz(6)
  updated_at             DateTime  @default(now()) @db.Timestamptz(6)
  deleted_at             DateTime? @db.Timestamptz(6)
}

enum split_enum {
  PENDING
  SUCCESS
  FAILED
  NONE
}

enum change_enum {
  ADD
  MODIFY
  DELETE
}
